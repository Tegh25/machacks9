from imageai.Classification import ImageClassification
from os import path, getcwd
import base64

data = b'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'

def setUpModel() -> ImageClassification:
    prediction = ImageClassification()
    prediction.setModelTypeAsMobileNetV2()
    prediction.setModelPath(path.join(getcwd(), 'mobilenet_v2-model.pth'))
    prediction.loadModel()
    return prediction

if __name__ == '__main__':
    img_file = path.join(getcwd(), 'image')
    
    prediction = setUpModel()    
   
    # classifyImage can't read directly from a decoded base64. 
    # The bandaid fix for this is to save the string as an image file first, 
    # then read it into the function.
    with open(img_file, 'wb+') as fh:
        fh.write(base64.decodebytes(data))
    
    possibilities, probabilities = prediction.classifyImage(img_file)
    for eachPrediction, eachProbability in zip(possibilities, probabilities):
        print(eachPrediction , " : " , eachProbability)